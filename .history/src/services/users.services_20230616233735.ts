import { RegisterReqBody } from '~/models/requests/User.requests'
import databaseService from './database.services'
import User from '~/models/schemas/User.schema'
import { hashPassword } from '../utils/crypto'
import { signToken } from '~/utils/jwt'
import { TokenType } from '~/constants/enums'
// Class style

class UsersServices {
  private signAccessToken(user_id: string) {
    return signToken({
      payload: {
        user_id,
        token_type: TokenType.AccessToken
      },
      options: {
        expiresIn: process.env.ACCESS_TOKEN_EXPIRES_IN
      }
    })
  }
  private signRefreshToken(user_id: string) {
    return signToken({
      payload: {
        user_id,
        token_type: TokenType.RefreshToken
      },
      options: {
        expiresIn: process.env.REFRESH_TOKEN_EXPIRES_IN
      }
    })
  }
  async register(payload: RegisterReqBody) {
    const result = await databaseService.users.insertOne(
      // This object User only contains the fields that we want to insert into the database
      new User({
        ...payload,
        date_of_birth: new Date(payload.date_of_birth),
        // Hash password using SHA-256
        password: hashPassword(payload.password)
      })
    )
    // Sign access token and refresh token after register successfully asynchorously

    const user_id = result.insertedId.toString() // get user_id from result automatically generated by mongodb
    const [access_token, refresh_token] = await Promise.all([
      // Promise.all() to run multiple promises at the same time
      this.signAccessToken(user_id),
      this.signRefreshToken(user_id)
    ])

    return [
      {
        access_token,
        refresh_token
      },
        console.log("ðŸš€ ~ file: users.services.ts:56 ~ UsersServices ~ register ~ access_token:", access_token),
      result
    ]
  }
  async checkEmailExisted(email: string) {
    const user = await databaseService.users.findOne({ email })
    console.log("ðŸš€ ~ file: users.services.ts:61 ~ UsersServices ~ checkEmailExisted ~ user:", user)
    
    return Boolean(user)
  }
}
const userServices = new UsersServices()
export default userServices

// functional style
// const signAccessToken = async (user_id) => {
//   return signToken({
//     payload: {
//       user_id,
//       token_type: TokenType.AccessToken
//     }
//   })
// }

// const signRefreshToken = async (user_id) => {
//   return signToken({
//     payload: {
//       user_id,
//       token_type: TokenType.RefreshToken
//     }
//   })
// }

// const register = async (payload) => {
//   const result = await databaseService.users.insertOne(
//     new User({
//       ...payload,
//       date_of_birth: new Date(payload.date_of_birth),
//       password: hashPassword(payload.password)
//     })
//   )

//   const user_id = result.insertedId.toString()
//   const [access_token, refresh_token] = await Promise.all([
//     signAccessToken(user_id),
//     signRefreshToken(user_id)
//   ])

//   return [{
//     access_token,
//     refresh_token
//   }, result]
// }

// const checkEmailExisted = async (email) => {
//   const user = await databaseService.users.findOne({ email })
//   console.log(user)
//   return Boolean(user)
// }

// export default {
//   register,
//   checkEmailExisted
// }
